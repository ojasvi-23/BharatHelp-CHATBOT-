# -*- coding: utf-8 -*-
"""Semantic Retrieval with ChromaDB and LangChain

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/186k7lUW6-6icB9Mq0Gygn_Kpyts6nCjL
"""

# Step 3: Semantic Retrieval with ChromaDB and LangChain

# Initialize OpenAIEmbeddings to create vector representations of our text
# These embeddings capture the semantic meaning of the text.
embeddings = OpenAIEmbeddings()
print("OpenAIEmbeddings initialized.")

# Create a Chroma vector store from the document chunks and embeddings.
# This process embeds each chunk and stores it in ChromaDB.
# ChromaDB will persist the data in a local directory named "chroma_db"
# so you don't have to re-embed every time you run the notebook.
persist_directory = 'chroma_db'
vectorstore = Chroma.from_documents(
    documents=texts,
    embedding=embeddings,
    persist_directory=persist_directory
)
print(f"ChromaDB vector store created and persisted to '{persist_directory}'.")

# Load the persisted database (if it already exists)
# This is useful for subsequent runs without re-embedding the entire knowledge base.
# vectorstore = Chroma(persist_directory=persist_directory, embedding_function=embeddings)
# print(f"ChromaDB vector store loaded from '{persist_directory}'.")

# Expose the vector store as a retriever.
# A retriever is an interface that returns documents given an unstructured query.
retriever = vectorstore.as_retriever(search_kwargs={"k": 3}) # Retrieve top 3 relevant documents
print("Retriever created.")

# Test the retriever with a sample query
sample_query = "What are the plans for BharatConnect?"
print(f"\nTesting retriever with query: '{sample_query}'")
retrieved_docs = retriever.get_relevant_documents(sample_query)
print(f"Found {len(retrieved_docs)} relevant document(s):")
for i, doc in enumerate(retrieved_docs):
    print(f"--- Retrieved Document {i+1} ---")
    print(doc.page_content)
    print("-----------------------------------")

print("\nSemantic retrieval setup complete.")